"""
Large CSV/Parquet Explorer Utility

A command-line tool designed for the fast and memory-efficient inspection of
large data files. It allows a user to quickly view the column headings or a
small preview of a file without loading the entire dataset into memory.

This is particularly useful when working with multi-gigabyte files generated by
the Strategy Finder project, such as the Silver or Diamond layer outputs.

Key Features:
- Supports both CSV and Parquet file formats transparently.
- Memory-safe operations for both reading headers and previewing rows.
- Uses efficient libraries like PyArrow for Parquet metadata when available.
- Provides a clean, untruncated terminal output for easy viewing.
"""

import pandas as pd
import os
import sys

def is_parquet_file(path):
    """
    Checks if a given file path points to a Parquet file based on its extension.

    Args:
        path (str): The file path to check.

    Returns:
        bool: True if the file has a common Parquet extension, False otherwise.
    """
    return os.path.splitext(path)[1].lower() in ('.parquet', '.pq', '.parq')

def get_csv_headings(file_path):
    """
    Fetches the column names from a CSV or Parquet file in a memory-efficient way.

    For Parquet files, it first attempts to read only the schema metadata using
    PyArrow for maximum efficiency. If that fails, it falls back to a limited
    read with pandas.

    For CSV files, it reads only the first chunk of the file to extract the headers.

    Args:
        file_path (str): The full path to the CSV or Parquet file.

    Returns:
        list: A list of column names (strings), or None if an error occurs.
    """
    # --- Parquet File Handling ---
    if is_parquet_file(file_path):
        try:
            # Prefer PyArrow for metadata extraction as it's the most efficient method.
            # It reads only the file's schema without touching the data rows.
            import pyarrow.parquet as pq
            pf = pq.ParquetFile(file_path)
            schema = pf.schema_arrow
            return list(schema.names)
        except Exception:
            # Fallback to pandas read_parquet if PyArrow fails or is not installed.
            # This is less efficient but more robust.
            try:
                # Read only the schema from the parquet file using pandas' engine
                df = pd.read_parquet(file_path) # This might read more than just schema in some cases
                return df.columns.tolist()
            except Exception as e:
                print(f"[ERROR] Error reading parquet headings with pandas fallback: {e}")
                return None

    # --- CSV File Handling ---
    try:
        # For CSVs, create an iterator to read the file in small pieces.
        # This prevents loading the whole file into memory.
        with pd.read_csv(file_path, iterator=True, chunksize=1, low_memory=True) as reader:
            # The engine's `names` attribute holds the column headers after the first read.
            columns = reader._engine.names
        return columns
    except Exception as e:
        print(f"[ERROR] Error reading CSV headings: {e}")
        return None


def show_csv_preview(file_path, num_rows=5):
    """
    Loads and displays the first few rows of a CSV or Parquet file.

    It configures pandas display options to ensure the output is fully visible
    and not truncated, which is ideal for a command-line interface.

    Args:
        file_path (str): The path to the CSV or Parquet file.
        num_rows (int, optional): The number of rows to display. Defaults to 5.
    """
    try:
        if is_parquet_file(file_path):
            # For Parquet, reading the first N rows is generally efficient.
            try:
                df_preview = pd.read_parquet(file_path)
                df_preview = df_preview.head(num_rows)
            except Exception as e:
                # Provide a more robust fallback using PyArrow table slicing
                try:
                    import pyarrow.parquet as pq
                    table = pq.read_table(file_path)
                    df_preview = table.slice(length=num_rows).to_pandas()
                except Exception as e2:
                    raise RuntimeError(f"Failed to read parquet preview with both pandas and pyarrow: {e} / {e2}")
        else:
            # For CSVs, the `nrows` parameter is highly memory-efficient.
            df_preview = pd.read_csv(file_path, nrows=num_rows, low_memory=True)

        # --- Configure pandas to provide a clean, untruncated display ---
        pd.set_option("display.max_columns", None)  # Show all columns
        pd.set_option("display.width", None)        # Use full terminal width
        pd.set_option("display.max_colwidth", None) # Show full content of each cell
        pd.set_option("display.expand_frame_repr", False) # Prevent wrapping to multiple lines

        print(f"\n[SUCCESS] Showing first {num_rows} rows:\n")
        # Use to_string() for a better formatted output than a simple print()
        print(df_preview.to_string(index=False))

    except Exception as e:
        print(f"[ERROR] Error reading preview rows: {e}")


def main():
    """Main function to run the interactive command-line utility."""
    print("üìÅ Large CSV/Parquet Explorer")
    default_path = "../silver_data/chunked_outcomes/XAUUSD15/chunk_1.csv"
    csv_file = input(f"Enter file path (CSV or Parquet). default: {default_path}: ").strip() or default_path

    if not os.path.exists(csv_file):
        print(f"[ERROR] File '{csv_file}' not found!")
        return

    # --- User Interaction Loop ---
    print("\nWhat do you want to do?")
    print("1Ô∏è‚É£  Show only column headings")
    print("2Ô∏è‚É£  Show column headings + first few rows")
    choice = input("Enter choice (1 or 2): ").strip()

    headings = get_csv_headings(csv_file)
    if headings:
        print("\nüìå Column Headings:")
        print(headings)

        if choice == "2":
            try:
                num_rows_input = input("How many rows to preview? (e.g., 5): ").strip()
                # Use default if input is empty, otherwise convert to int
                num_rows = int(num_rows_input) if num_rows_input else 5
            except ValueError:
                print("Invalid number. Defaulting to 5 rows.")
                num_rows = 5
            show_csv_preview(csv_file, num_rows)
    else:
        print("[WARNING] Could not extract headings from the file.")


if __name__ == "__main__":
    main()